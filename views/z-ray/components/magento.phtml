<div class="zdb-toolbar-entry zsb-called-observers-details" data-name="called-observers">
    <div class="zdb-toolbar-preview" title="Called Observers">
        <div class="zdb-toolbar-icon"></div>
        <span class="zdb-toolbar-info">Called Observers PHP</span>
    </div>
    <div class="zdb-toolbar-detail zdb-called-observers-detail-wrapper">
    	<div class="zdb-row zdb-toolbar-detail-header">
    		<div class="zdb-col-1-narrow">
    			<h1>Called Observers PHP</h1>
    		</div>
    		<div class="zdb-col-3-wide">
    			<div class="zdb-pull-left">
    				<?php echo $this->devBarPager(); ?>
    			</div>
    			<div class="zdb-pull-right">
    				<ul class="zdb-toolbar-items zdb-horizontal">
    					<li class="zdb-toolbar-filter">
    						<label for="zdb-toolbar-input-filter-text">Filter by</label>
    						<select>
    							<option value="">Parameter</option>
    						</select>
    						<input type="text" name="zdb-toolbar-input-filter-text" id="zdb-toolbar-input-filter-text" size="6" class="zdb-toolbar-input zdb-toolbar-input-filter-parameter" />
    					</li>
    					<li class="zdb-toolbar-search">
    						<?php echo $this->devBarSearch(); ?>
    					</li>
    					<li>
							<div class="zdb-export-results-btn" title="Show Report"></div>
						</li>
    					<li class="zdb-toolbar-pin">
    						<div class="zdb-popup-pin" onclick="zendDevBar.unpin()"></div>
    					</li>
    				</ul>
    			</div>
    		</div>
    	</div>
    	<div class="zdb-row zdb-panel zsb-called-observers-panel">
    		<!-- Left panel: summary -->
    		<div class="zdb-col-1-narrow zdb-adaptive-height zdb-summary-table-wrapper zdb-called-observers-summary"></div>
    		
    		<!-- main panel: called-observers -->
    		<div class="zdb-col-3-wide zdb-entries-table-wrapper zdb-adaptive-height zsb-called-observers-table-wrapper"></div>
    	</div>
    </div>
</div>

<script type="text/javascript">
(function() {
	var calledObserversStorage = zendDevBar.getStorage('magento-called-observers-php');
	var maintable = zendDevBar.createTable(calledObserversStorage, $zendDevBar('.zsb-called-observers-table-wrapper'));
		
	maintable.setColumns([
        {
	        "label": "Event Name",
	        "propertyName": "event",
	        "sortable": true,
	        "width": '33%'
	    },
	    {
	        "label": "Observer",
	        "propertyName": "class",
	        "sortable": true,
	        "getHtml": function(val, rec){
		        return rec['class'] + '::' + rec['method'];
		    },
	        "width": '33%'
	    },
	    {
	        "label": "Time(ms)",
	        "propertyName": "duration",
	        "sortable": true,
	        "width": '100px',
	        'getHtml': function(val, rec) {
	        	if (isNaN(val)) {
	        		return '';
	        	}
	        	return zendDevBar.formatters.formatMicroseconds(val, 2, false) + 'ms';
	        }
	    },
	    {
	        "label": "block",
	        "propertyName": "block",
	        "sortable": true,
	        "width": '50px'
	    },
	    {
	        "label": "target",
	        "propertyName": "target",
	        "sortable": true,
	        "width": '33%'
	    },
	    {
	        "label": "type",
	        "propertyName": "type",
	        "sortable": true,
	        "width": '50px'
	    },
	    {
	        "label": "area",
	        "propertyName": "area",
	        "sortable": true,
	        "width": '50px'
	    }
    ]);

	var summaryTable = zendDevBar.createSummaryTable(calledObserversStorage, $zendDevBar('.zdb-called-observers-summary'));
	
	summaryTable.setFilterColumn('area');
	summaryTable.setUpdateCallback(function (data){
		if (! data) return [];

		var aggregatedObservers = {};
		$zendDevBar.each(data, function(key, observer){
			if (aggregatedObservers[observer.area]) {
				aggregatedObservers[observer.area]++;
			} else {
				aggregatedObservers[observer.area] = 1;
			}
		});

		if (Object.keys(aggregatedObservers).length == 0) {
			return [];
		}
		
		var normalized = [];
		normalized.push({'type': 'All', 'count': $zendDevBar.map(aggregatedObservers, function(v){return v}).reduce(function(acc, item){return acc += item})});
		
		return normalized.concat($zendDevBar.map(aggregatedObservers, function(count, area){
			return {'type': area, 'count': count};
		}));
		
	});
	
	summaryTable.setTableHeaderHtml('<th colspan="100%">Show</th>');
	summaryTable.setColumns([{
		label: 'Types',
		propertyName: 'type',
		width: '10%',
		getHtml: function(val, rec) { return summaryTable.createCheckboxColumn(val, rec, summaryTable); }
	},
	{
		label: 'Types',
		propertyName: 'type',
		width: '80%'
	},
	{
		label: 'Count',
		propertyName: 'count',
		width: '10%',
		attributes: {'class': 'zdb-numerical'},
		getHtml: function(val) {
			return '(' + val + ')';
		}
	}]);
	
	new $zendDevBar.zdbPager(calledObserversStorage, $zendDevBar('.zdb-called-observers-detail-wrapper .zdb-pager').first());
	new $zendDevBar.zdbSearch(calledObserversStorage, $zendDevBar('.zdb-called-observers-detail-wrapper .zdb-toolbar-input-search').first(), maintable);

	
	zendDevBar.registerRequestDisplay('magento-extension-php', function($, data) {
		if (zendDevBar.parametersMap['magento']) {
			var extensionData = zendDevBar.parametersMap['magento'];
	
			var observers = extensionData.observers;
			var events = extensionData.events;
	
			$.each(observers, function(key, observer){
				$.each(events, function(key, event){
					if (event.event == observer.event && event['class'] == observer['class'] && event.method == observer.method) {
						observer.duration = event.duration;
						observer.target = event.target;
					}
				}); 
			});
	
			calledObserversStorage.setData(observers);
		}
	});
})();
</script>